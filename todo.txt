User stories in (somewhat) order of priority:
    1.) As a user in a match, I want to be able to run my code as a sanity check
        against 3 test cases and get feedback on how my solution is looking.
            - This involves:
                * need to create a json parser for arbitrary inputs and outputs
                * implement the test algorithm
                * creating enough problems for the app to be interesting (start with maybe 10?)
                * creating sanity check test cases for each problem
                * creating rigorous test cases for each problem

    2.) As a user, I want to be able to submit my code against the full test suite
        and get feedback on whether my solution passed or failed.

    3.) As a user, when my submission fails, I want to be able to see which test my code
        fails on, along with my code's output and the expected output.

    4.) As a user, I want to be able to enter the matchmaking queue.

    5.) As a user, I want to be able to get into a match with another user. 

    6.) As a user, I want to be able to create an account.

    7.) As a user, I want to be able to log in.

    8.) As a user, when I run my code, I want to be able to see errors that are produced by my faulty code.

run code          [x]
populate db with problems and test cases [ ]

----- implement algorithm to test solution given source code ------  
----- need to standardize a test data structure -------------------
----- maybe json some test cases and write a script to load into db ?
Steps:
    fetch test cases
    results = []
    for each test case
        output = execute(testcase.input)
        compare textcase.expectedOutput to output
        push test case results to results
        if test case failed:
            return results, tests failed

    return results, tests succeedded

------ Matchmaking ----
set up web sockets [ ]
implement queue [ ]
implement matchmaking algorithm [ ]



----- Account -------
create account    [x]
get account       [ ] // this is needed to view profiles, but not necessary for mvp
update account    [ ] // doesn't matter yet, lower prio
delete account    [ ] // same


--- Submission ------
/* 
 * Only accepted submissions will be stored in DB,
 * one per problem per user. To be used later for
 * problem solutions and to show users their previous solutions
 */
create submission [ ]
get submission    [ ]

=============================

NOT NECESSARY FOR INITIAL APP
CAN MANUALLY DO THESE + THEYRE STATIC
----- Problem -------
create problem    [ ]

------ Testcase ------
create testcase   [ ]
get testcases     [ ] // by problem id
